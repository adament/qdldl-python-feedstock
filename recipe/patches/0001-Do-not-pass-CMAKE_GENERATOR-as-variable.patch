From 1681e367554c4d1ba81d0706303c728495ad6785 Mon Sep 17 00:00:00 2001
From: Adam Ehlers Nyholm Thomsen <aen@atp.dk>
Date: Thu, 14 Dec 2023 11:43:33 +0100
Subject: [PATCH 1/4] Do not pass CMAKE_GENERATOR as variable

From my reading of the documentation:
https://cmake.org/cmake/help/latest/variable/CMAKE_GENERATOR.html this
should only be passed via the -G option, interactively in cmake-gui or
as an environment variable.

If CMAKE_GENERATOR is passed as a variable definition (via. -D) and the
-G option is used as well then cmake gives an error about conflicting
change of generator, as if it expects the CMAKE_GENERATOR variable
definition to specify the generator given a prior cmake run.
---
 setup.py | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

diff --git a/setup.py b/setup.py
index 47b2ab6..49a847c 100644
--- a/setup.py
+++ b/setup.py
@@ -34,15 +34,9 @@ class get_pybind_include(object):
 
 
 cmake_args = []
-# What variables from the environment do we wish to pass on to cmake as variables?
-cmake_env_vars = ('CMAKE_GENERATOR', 'CMAKE_GENERATOR_PLATFORM')
-for cmake_env_var in cmake_env_vars:
-    cmake_var = os.environ.get(cmake_env_var)
-    if cmake_var:
-        cmake_args.extend([f'-D{cmake_env_var}={cmake_var}'])
 
 # Add parameters to cmake_args and define_macros
-cmake_args += ["-DUNITTESTS=OFF"]
+cmake_args = ["-DUNITTESTS=OFF"]
 cmake_build_flags = []
 lib_subdir = []
 
-- 
2.43.0.windows.1

